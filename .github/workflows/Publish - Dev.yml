name: Publish - Dev
on:
  workflow_dispatch:
  # schedule:
  #   - cron: "0 */6 * * *"

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - package: "discordx"
            folder: "discordx"
          - package: "@discordx/music"
            folder: "music"
          - package: "@discordx/pagination"
            folder: "pagination"
          - package: "@discordx/utilities"
            folder: "utilities"
    steps:
      - name: check out code ðŸ›Ž
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"

      - name: Synchronize dev version
        run: |
          npm version --git-tag-version=false $(npm view ${{ matrix.package }} version)
          npm version --git-tag-version=false major
          npm version --git-tag-version=false "$(jq --raw-output '.version' package.json)-dev"
        working-directory: ./packages/${{ matrix.folder }}

      - name: Update version
        run: npm version --git-tag-version=false ${{ github.event.inputs.version }}
        working-directory: ./packages/${{ matrix.folder }}

      - name: pre-release
        id: pre-release
        run: |
          if [[ $(npm view ${{ matrix.package }}@dev version | grep -e "$(jq --raw-output '.version' package.json).*.$(git log --max-count=1 --pretty=format:%h src)") ]]; \
          then echo "release=false" >> $GITHUB_OUTPUT; \
          else echo "release=true" >> $GITHUB_OUTPUT; fi
        working-directory: ./packages/${{ matrix.folder }}

      - name: Install Dependencies
        if: steps.pre-release.outputs.release == 'true'
        run: npm install --force
        working-directory: ./packages/${{ matrix.folder }}

      - name: Build
        if: steps.pre-release.outputs.release == 'true'
        run: npm run build
        working-directory: ./packages/${{ matrix.folder }}

      - name: Deprecate old versions
        if: steps.pre-release.outputs.release == 'true'
        run: npx @favware/npm-deprecate -d --name "*dev*" --package "${{ matrix.package }}" --message "Version no longer supported. Upgrade to @latest"
        working-directory: ./packages/${{ matrix.folder }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish
        if: steps.pre-release.outputs.release == 'true'
        run: |
          npm version --git-tag-version=false $(jq --raw-output '.version' package.json).$(date +%s).$(git log --max-count=1 --pretty=format:%h src)
          npm publish --tag dev
        working-directory: ./packages/${{ matrix.folder }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
